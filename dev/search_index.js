var documenterSearchIndex = {"docs":
[{"location":"#PlutoVSCodeDebugger","page":"Home","title":"PlutoVSCodeDebugger","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PlutoVSCodeDebugger.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PlutoVSCodeDebugger]","category":"page"},{"location":"#PlutoVSCodeDebugger.@connect_vscode-Tuple{Any}","page":"Home","title":"PlutoVSCodeDebugger.@connect_vscode","text":"@connect_vscode begin \n    #=Pasted Code from VSCode=#\nend\n\nThis macro is used within a Pluto notebook to connect a VSCode instance running on the same machine as the Pluto Server.\n\nThe way to connect the notebook is by following these steps:\n\nOn VSCode, execute the Julia: Connect external REPL command and copy the returned code snippet\nMake sure that PlutoVSCodeDebugger is loaded in the target Pluto notebook by having the using PlutoVSCodeDebugger statement inside a cell\nCreate a new cell (or modify an existing cell) putting the code copied at point 1 inside a begin - end block passed to the @connect_vscode macro, like shown in the call signature at the top of this docstring. \nExecute the cell containing @connect_vscode.\n\nOnce the connection is established, you should see a popup in VSCode like the one below confirming this.\n\n(Image: image)\n\nYou can now use @enter or @run to debug function called in the notebook workspace exploiting the VSCode debugger.\n\nYou can also use the exported @vscedit to jump at function definitions in VSCode from the Pluto notebook for convenience of setting up breakpoints. This function works similarly to the @edit macro from InteractiveUtils.\n\n\n\n\n\n","category":"macro"},{"location":"#PlutoVSCodeDebugger.@enter-Tuple{Any}","page":"Home","title":"PlutoVSCodeDebugger.@enter","text":"@enter command\n\nmacro exported by PlutoVSCodeDebugger to allow entering the debugger from a Pluto notebook in a connected VSCode instance.\n\nIt works equivalently to the @enter macro available in the VSCode Julia REPL but can only be executed after connecting a running VSCode instance with @connect_vscode.\n\nNote\n\nThe macro does not currently support debugging commands that contain other macro calls, except for the @__FILE__ and @__MODULE__ ones that are substituted during macro expansion.\n\nSo, when ran with the following example code:\n\n@enter @othermacro args...\n\nThis macro will simply throw an error because the code to run directly contains another macro.\n\nSee also: @connect_vscode, @run, @vscedit\n\n\n\n\n\n","category":"macro"},{"location":"#PlutoVSCodeDebugger.@run-Tuple{Any}","page":"Home","title":"PlutoVSCodeDebugger.@run","text":"@run command\n\nmacro exported by PlutoVSCodeDebugger to allow running the debugger from a Pluto notebook in a connected VSCode instance.\n\nIt works equivalently to the @run macro available in the VSCode Julia REPL but can only be executed after connecting a running VSCode instance with @connect_vscode.\n\nNote\n\nThe macro does not currently support debugging commands that contain other macro calls, except for the @__FILE__ and @__MODULE__ ones that are substituted during macro expansion.\n\nSo, when ran with the following example code:\n\n@enter @othermacro args...\n\nThis macro will simply throw an error because the code to run directly contains another macro.\n\nSetting breakpoints\n\nBreakpoints set in VSCode will be respected by the @run macro, exactly like it would happen in VSCode. To simplify reaching the file position associated to a given function/method to put a breakpoint see the @vscedit macro also exported by this package.\n\nFunctions that are defined inside the notebook directly can not have breakpoints as they do not have an associated file (they are just evaluated within the current Pluto module).\n\nFor those functions, the only solution for the time being is using the @enter macro and stepping manually inside the functions call.\n\n\n\n\n\n","category":"macro"},{"location":"#PlutoVSCodeDebugger.@vscedit-Tuple{Any}","page":"Home","title":"PlutoVSCodeDebugger.@vscedit","text":"@vscedit function_name(args...)\n@vscedit function_name\n\nThis macro allows opening the file location where the called method of function_name is defined on the VSCode instance connected to the calling Pluto.\n\nThe notebook has to be previosuly connected to VSCode using the @connect_vscode macro.\n\nThe synthax and functionality of this macro is mirroring the one of the @edit macro available in InteractiveUtils. When multiple methods for the called signature exists, or when the macro is called simply with a function name rather than a call signature, the macro will simply point to the first method on the MethodList return by the Base.methods function.\n\nSee also: @connect_vscode, @run, @enter\n\n\n\n\n\n","category":"macro"}]
}
